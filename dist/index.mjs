var w=Object.defineProperty;var c=(r,o)=>w(r,"name",{value:o,configurable:!0}),h=(r=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(r,{get:(o,e)=>(typeof require<"u"?require:o)[e]}):r)(function(r){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+r+'" is not supported')});import{debug as y}from"debug";var $=y("scaffold:module"),l=class{static{c(this,"ScaffoldingModule")}name;requests;executors;version;priority;enabled;configSchema;constructor(o,e=[],t=[]){this.name=o,this.requests=e,this.executors=t,this.version="1.0.0",this.priority=50,this.enabled=!0}async exec(o,e){for await(let t of this.requests)if(!(!t.executors||t.executors.length<1))for(let s of t.executors)s.executor.exec&&($(`execute ${this.name} -> ${s.executor.match.module} ${s.executor.description?` -> ${s.executor.description}`:""}`),await s.executor.exec({request:t,state:s.context.state},e));return{}}};import{debug as P}from"debug";import{Project as M}from"ts-morph";import{cosmiconfigSync as b}from"cosmiconfig";import{debug as j}from"debug";var g=j("scaffold:config");function p(r){let e=b("scaffold",{stopDir:r,searchPlaces:[".scaffold/scaffold.config.json",".scaffold/scaffold.config.yaml",".scaffold/scaffold.config.yml",".scaffold/scaffold.config.js",".scaffold/scaffold.config.ts",".scaffold/scaffold.config.cjs","scaffold.config.json","scaffold.config.yaml","scaffold.config.yml","scaffold.config.js","scaffold.config.ts","scaffold.config.cjs"],mergeSearchPlaces:!1}).search(r);return!e||e.isEmpty?(g("no config found"),{}):(g(`using ${e.filepath}`),e.config)}c(p,"loadConfig");var u=P("scaffold:handler"),m=class{static{c(this,"ScaffoldingHandler")}cwd;tsMorphProject;modulesDict;executors;rawConfig;config;logger(o,e,t){console.log(`[${o}] ${t?`[${t}]`:""} ${e}`)}constructor(o=process.cwd()){this.cwd=o,this.modulesDict={},this.executors=[],this.rawConfig={},this.config={},this.tsMorphProject=new M({tsConfigFilePath:`${o}/tsconfig.json`}),this.rawConfig=p(this.cwd)}register(o){if(!o.name)throw new Error("name is required");if(o.name in this.modulesDict)throw new Error(`ScaffoldingModule ${o.name} already exists`);this.modulesDict[o.name]=o}async init(){let o=Object.values(this.modulesDict);for(let e of o){let t=e.name in this.rawConfig?this.rawConfig[e.name]:void 0;if(e.configSchema){let{success:s,data:i,error:n}=await e.configSchema.safeParseAsync(t||{});if(!s)throw new Error(`Invalid config for ${e.name}: ${n}`);t=i}this.config[e.name]=t,e.init?await e.init({cwd:this.cwd,modules:this.modulesDict,config:t,store:{},arguments:{}},{tsMorphProject:this.tsMorphProject,logger:this.logger}):u(`init* ${e.name}`)}for(let e of o)this.executors.push(...e.executors.map(t=>({...t,match:{...t.match,module:e.name}})));for(let e of o)for(let t of e.requests.filter(s=>Object.keys(s.match).length>0)){t.module=e;let s=[];for await(let i of this.executors)if(!(!i.match||!Object.entries(t.match).every(([n,d])=>i.match[n]===d)))if(i.init){let{disabled:n,state:d}=await i.init({request:t},{tsMorphProject:this.tsMorphProject,logger:this.logger},{disabled:!1,state:{}});n||(u(`init ${e.name}	 -> ${i?.match.module} 	${i?.description?` -> ${i.description}`:""}`),s.push({context:{state:d},executor:i}))}else u(`init* ${e.name}	 -> ${i?.match.module} 	${i?.description?` -> ${i.description}`:""}`),s.push({context:{},executor:i});if(t.executors=s,t.executors.length===0&&!t.optional)throw new Error(`No executors found for ${e.name} ${t.description?` -> ${t.description}`:""}`)}}async exec(){let o=Object.values(this.modulesDict).filter(e=>e.enabled).sort((e,t)=>e.priority-t.priority);for await(let e of o)await e.exec({cwd:this.cwd,modules:this.modulesDict,config:this.config[e.name],store:{},arguments:{}},{tsMorphProject:this.tsMorphProject,logger:this.logger});await this.tsMorphProject.save()}reset(){for(let o in this.modulesDict)delete this.modulesDict[o]}};import{debug as E}from"debug";import{glob as D}from"fast-glob";import{jsVariants as x}from"interpret";import{extname as q}from"node:path";import{pathToFileURL as C}from"node:url";import{prepare as S}from"rechoir";var v=E("scaffold:finder");async function _(r){let o;try{o=h(r)}catch(e){let t;try{t=new Function("id","return import(id);")}catch{t=void 0}if(e.code==="ERR_REQUIRE_ESM"&&t){let s=C(r).href;return o=(await t(s)).default,o}throw e}return o&&typeof o=="object"&&"default"in o&&(o=o.default||{}),o||{}}c(_,"tryRequireThenImport");async function F(r){let o=q(r);if(o===".json"||!Object.keys(x).includes(o))throw new Error(`Unsupported file type: ${o}`);return S(x,r),await _(r)}c(F,"loadModule");async function*R(r){for(let o of await D(["**/.*.scaffold.*","**/.scaffold.*"],{cwd:r.cwd,dot:!0,ignore:["node_modules"]})){v(`found ${o}`);try{yield await F(`${r.cwd}/${o}`)}catch(e){console.error(e)}}}c(R,"findScaffoldFiles");import*as lo from"ts-morph";import*as uo from"semver";import*as mo from"zod";import{glob as go}from"fast-glob";import*as po from"yawn-yaml";export{m as ScaffoldingHandler,l as ScaffoldingModule,po as YAWN,R as findScaffoldFiles,go as glob,uo as semver,lo as tsMorph,mo as zod};
