var w=Object.defineProperty;var c=(s,e)=>w(s,"name",{value:e,configurable:!0}),h=(s=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(s,{get:(e,o)=>(typeof require<"u"?require:e)[o]}):s)(function(s){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+s+'" is not supported')});import{debug as y}from"debug";var $=y("scaffold:module"),l=class{static{c(this,"ScaffoldingModule")}name;requests;executors;version;priority;enabled;configSchema;constructor(e,o=[],t=[]){this.name=e,this.requests=o,this.executors=t,this.version="1.0.0",this.priority=50,this.enabled=!0}async exec(e,o){for await(let t of this.requests)if(!(!t.executors||t.executors.length<1))for(let r of t.executors)r.executor.exec&&($(`execute ${this.name} -> ${r.executor.match.module} ${r.executor.description?` -> ${r.executor.description}`:""}`),await r.executor.exec({request:t,state:r.context.state},o));return{}}};import{debug as P}from"debug";import{Project as M}from"ts-morph";import{cosmiconfigSync as j}from"cosmiconfig";import{debug as b}from"debug";var g=b("scaffold:config");function p(s){let o=j("scaffold",{stopDir:s,searchPlaces:[".scaffold/scaffold.config.json",".scaffold/scaffold.config.yaml",".scaffold/scaffold.config.yml",".scaffold/scaffold.config.js",".scaffold/scaffold.config.ts",".scaffold/scaffold.config.cjs","scaffold.config.json","scaffold.config.yaml","scaffold.config.yml","scaffold.config.js","scaffold.config.ts","scaffold.config.cjs"],mergeSearchPlaces:!1}).search(s);return!o||o.isEmpty?(g("no config found"),{}):(g(`using ${o.filepath}`),o.config)}c(p,"loadConfig");var u=P("scaffold:handler"),m=class{static{c(this,"ScaffoldingHandler")}cwd;tsMorphProject;modulesDict;executors;rawConfig;config;logger(e,o,t){console.log(`[${e}] ${t?`[${t}]`:""} ${o}`)}constructor(e=process.cwd()){this.cwd=e,this.modulesDict={},this.executors=[],this.rawConfig={},this.config={},this.tsMorphProject=new M({tsConfigFilePath:`${e}/tsconfig.json`}),this.rawConfig=p(this.cwd)}register(e){if(!e.name)throw new Error("name is required");if(e.name in this.modulesDict)throw new Error(`ScaffoldingModule ${e.name} already exists`);this.modulesDict[e.name]=e}async init(){let e=Object.values(this.modulesDict);for(let o of e){let t=o.name in this.rawConfig?this.rawConfig[o.name]:void 0;if(o.configSchema){let{success:r,data:i,error:n}=await o.configSchema.safeParseAsync(t||{});if(!r)throw new Error(`Invalid config for ${o.name}: ${n}`);t=i}this.config[o.name]=t,o.init?await o.init({cwd:this.cwd,modules:this.modulesDict,config:t,store:{},arguments:{}},{tsMorphProject:this.tsMorphProject,logger:this.logger}):u(`init* ${o.name}`)}for(let o of e)this.executors.push(...o.executors.map(t=>({...t,match:{...t.match,module:o.name}})));for(let o of e)for(let t of o.requests.filter(r=>Object.keys(r.match).length>0)){t.module=o;let r=[];for await(let i of this.executors)if(!(!i.match||!Object.entries(t.match).every(([n,d])=>i.match[n]===d)))if(i.init){let{disabled:n,state:d}=await i.init({request:t},{tsMorphProject:this.tsMorphProject,logger:this.logger},{disabled:!1,state:{}});n||(u(`init ${o.name}	 -> ${i?.match.module} 	${i?.description?` -> ${i.description}`:""}`),r.push({context:{state:d},executor:i}))}else u(`init* ${o.name}	 -> ${i?.match.module} 	${i?.description?` -> ${i.description}`:""}`),r.push({context:{},executor:i});if(t.executors=r,t.executors.length===0&&!t.optional)throw new Error(`No executors found for ${o.name} ${t.description?` -> ${t.description}`:""}`)}}async exec(){let e=Object.values(this.modulesDict).filter(o=>o.enabled).sort((o,t)=>o.priority-t.priority);for await(let o of e)await o.exec({cwd:this.cwd,modules:this.modulesDict,config:this.config[o.name],store:{},arguments:{}},{tsMorphProject:this.tsMorphProject,logger:this.logger});await this.tsMorphProject.save()}reset(){for(let e in this.modulesDict)delete this.modulesDict[e]}};import{debug as E}from"debug";import{glob as D}from"fast-glob";import{jsVariants as x}from"interpret";import{extname as q}from"node:path";import{pathToFileURL as C}from"node:url";import{prepare as S}from"rechoir";var v=E("scaffold:finder");async function _(s){let e;try{e=h(s)}catch(o){let t;try{t=new Function("id","return import(id);")}catch{t=void 0}if(o.code==="ERR_REQUIRE_ESM"&&t){let r=C(s).href;return e=(await t(r)).default,e}throw o}return e&&typeof e=="object"&&"default"in e&&(e=e.default||{}),e||{}}c(_,"tryRequireThenImport");async function F(s){let e=q(s);if(e===".json"||!Object.keys(x).includes(e))throw new Error(`Unsupported file type: ${e}`);return S(x,s),await _(s)}c(F,"loadModule");async function*R(s){for(let e of await D(["**/.*.scaffold.*","**/.scaffold.*"],{cwd:s.cwd,dot:!0,ignore:["node_modules"]})){v(`found ${e}`);try{yield await F(`${s.cwd}/${e}`)}catch(o){console.error(o)}}}c(R,"findScaffoldFiles");import*as de from"ts-morph";import*as le from"semver";import*as ue from"zod";export{m as ScaffoldingHandler,l as ScaffoldingModule,R as findScaffoldFiles,le as semver,de as tsMorph,ue as zod};
